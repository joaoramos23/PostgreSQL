/* POSTGRESS PARTE II*/

CREATE DATABASE POSTGRESQL_P2;

CREATE TABLE ALUNO(
	ID SERIAL PRIMARY KEY,
	PRIMEIRO_NOME VARCHAR(255) NOT NULL,
	ULTIMO_NOME VARCHAR(255) NOT NULL,
	DATA_NASCIMENTO DATE NOT NULL
);

CREATE TABLE CATEGORIA(
	ID SERIAL PRIMARY KEY,
	NOME VARCHAR(255) NOT NULL
);

CREATE TABLE CURSO(
	ID SERIAL PRIMARY KEY,
	NOME VARCHAR(255) NOT NULL,
	CATEGORIA_ID INTEGER NOT NULL REFERENCES CATEGORIA(ID)	
);


CREATE TABLE ALUNO_CURSO(
	ALUNO_ID INTEGER NOT NULL REFERENCES ALUNO(ID),
	CURSO_ID INTEGER NOT NULL REFERENCES CURSO(ID),
	PRIMARY KEY(CURSO_ID,ALUNO_ID)
);


/* ADICIONANDO DADOS */

INSERT INTO aluno (primeiro_nome, ultimo_nome, data_nascimento) VALUES (
	'Vinicius', 'Dias', '1997-10-15'
), (
	'Patricia', 'Freitas', '1986-10-25'
), (
	'Diogo', 'Oliveira', '1984-08-27'
), (
	'Maria', 'Rosa', '1985-01-01'
), (
	'João', 'Ramos', '1999-06-03'
);

INSERT INTO categoria (nome) VALUES ('Front-end'), ('Programação'), ('Bancos de dados'), ('Data Science');

INSERT INTO curso (nome, CATEGORIA_ID) VALUES
	('HTML', 1),
	('CSS', 1),
	('JS', 1),
	('PHP', 2),
	('Java', 2),
	('C++', 2),
	('PostgreSQL', 3),
	('MySQL', 3),
	('Oracle', 3),
	('SQL Server', 3),
	('SQLite', 3),
	('Pandas', 4),
	('Machine Learning', 4),
	('Power BI', 4);
	
INSERT INTO aluno_curso VALUES (1, 4), (1, 11), (2, 1), (2, 2), (3, 4), (3, 3), (4, 4), (4, 6), (4, 5);

SELECT * FROM CURSO JOIN CATEGORIA ON CURSO.CATEGORIA_ID = CATEGORIA.ID;

/* CONSULTA PARA SABER QUANTOS ALUNOS TEM EM CADA CATEGORIA */
SELECT CATEGORIA.NOME,COUNT(ALUNO_CURSO.ALUNO_ID) FROM CATEGORIA 
JOIN CURSO ON CATEGORIA.ID = CURSO.CATEGORIA_ID
LEFT JOIN ALUNO_CURSO ON CURSO.ID = ALUNO_CURSO.CURSO_ID
GROUP BY 1;

/* CONSULTA PARA SABER QUANTOS ALUNOS TEM EM CADA CURSO MOSTRANDO A CATEGORIA */
SELECT CURSO.ID,CURSO.NOME, CATEGORIA.NOME,COUNT(ALUNO_CURSO.ALUNO_ID) FROM CURSO 
JOIN CATEGORIA ON CURSO.CATEGORIA_ID = CATEGORIA.ID
JOIN ALUNO_CURSO ON ALUNO_CURSO.CURSO_ID = CURSO.ID
GROUP BY 2,3,1
ORDER BY 4 DESC;

/* CONSULTA PARA SABER QUANTOS CURSOS OS ALUNOS ESTÃO MATRICULADOS */
SELECT	ALUNO.ID,ALUNO.PRIMEIRO_NOME,ALUNO.ULTIMO_NOME, 
		COUNT(ALUNO_CURSO.ALUNO_ID) cursos_matriculados 
FROM ALUNO
LEFT JOIN ALUNO_CURSO ON ALUNO.ID = ALUNO_CURSO.ALUNO_ID
GROUP BY 2,3,1
ORDER BY 4 DESC;

/* CONSULTA PARA SABER QUANTOS ALUNOS TEM EM CADA CURSO */
SELECT CURSO.NOME,COUNT(ALUNO_CURSO.ALUNO_ID) FROM CURSO
JOIN ALUNO_CURSO ON ALUNO_CURSO.CURSO_ID = CURSO.ID
GROUP BY 1;

SELECT * FROM CURSO WHERE CATEGORIA_ID IN (1,2);

SELECT * FROM CURSO WHERE CATEGORIA_ID 
IN (SELECT ID FROM CATEGORIA WHERE NOME NOT LIKE '% %');

/* CONSULTA PARA SABER QUANTOS CURSOS TEM EM CADA CATEGORIA */

SELECT CATEGORIA.NOME,COUNT(CURSO.ID) FROM CATEGORIA 
JOIN CURSO ON CURSO.CATEGORIA_ID = CATEGORIA.ID
GROUP BY 1
;

/* CONSULTA PARA SABER QUANTOS CURSOS TEM EM CADA CATEGORIA UTILIZANDO SUBQUERIES*/

SELECT CATEGORIA,NUMERO_CURSOS 
	FROM (
			SELECT CATEGORIA.NOME AS CATEGORIA,
			COUNT(CURSO.ID) AS NUMERO_CURSOS
			FROM CATEGORIA 
			JOIN CURSO ON CURSO.CATEGORIA_ID = CATEGORIA.ID
			GROUP BY 1
	) AS CATEGORIA_CURSOS 
	WHERE NUMERO_CURSOS > 3;

/* FUNÇÕES COM STRINGS */

SELECT (PRIMEIRO_NOME || ' ' || ULTIMO_NOME) AS NOME_COMPLETO FROM ALUNO;
/* A FUNLÇAO "CONCAT()" IGNORA COLUNAS VAZIAS "NULL" */
SELECT CONCAT(PRIMEIRO_NOME,'',ULTIMO_NOME) AS NOME_COMPLETO FROM ALUNO;

/* FUNÇÕES COM DATAS */

 SELECT CONCAT(PRIMEIRO_NOME,'',ULTIMO_NOME) AS NOME_COMPLETO,
		EXTRACT(YEAR FROM AGE(DATA_NASCIMENTO)) AS IDADE
	FROM ALUNO;
	
 SELECT CONCAT(PRIMEIRO_NOME,'',ULTIMO_NOME) AS NOME_COMPLETO,
		((NOW()::DATE - DATA_NASCIMENTO)/365) AS IDADE
	FROM ALUNO;
	
SELECT TO_CHAR(NOW(),'DD/MM/YYYY');
SELECT TO_CHAR(138.3::REAL,'999D99');
SELECT 138.9::INT;


/* NOMEAR CUNSULTAS */ 

CREATE VIEW VW_CURSOS_POR_CATEGORIA AS SELECT CATEGORIA.NOME AS CATEGORIA,
											  COUNT(CURSO.ID) AS NUMERO_CURSOS
											FROM CATEGORIA 
											JOIN CURSO ON CURSO.CATEGORIA_ID = CATEGORIA.ID
												GROUP BY 1;
												
SELECT CATEGORIA,NUMERO_CURSOS FROM VW_CURSOS_POR_CATEGORIA

/* NÃO É RECOMENDADO FAZER DESSA FORMA POIS NÃO É OTIMIZADO */
SELECT CATEGORIA,NUMERO_CURSOS FROM VW_CURSOS_POR_CATEGORIA
WHERE NUMERO_CURSOS > 3;

/* CONSULTAR CURSOS O QUAL A CATEGORIA É PROGRAMAÇÃO*/
/* FORMA 1 PROCURANDO PELO NOME*/
CREATE VIEW VW_CURSOS_PROGRAMAÇÃO_1 AS 
 SELECT CURSO.NOME FROM CURSO
 JOIN CATEGORIA ON CATEGORIA.ID = CURSO.CATEGORIA_ID
 WHERE CATEGORIA.NOME = 'Programação';

/* CONSULTAR CURSOS O QUAL A CATEGORIA É PROGRAMAÇÃO*/
/* FORMA 2 PROCURANDO PELO ID*/
CREATE VIEW VW_CURSOS_PROGRAMAÇÃO_2 AS 
 SELECT NOME AS NOME_CURSO FROM CURSO
 WHERE CATEGORIA_ID = 2;
 
/* SELECT NAS DUAS VIEWS DE CIMA */
SELECT * FROM VW_CURSOS_PROGRAMAÇÃO_1;
SELECT * FROM VW_CURSOS_PROGRAMAÇÃO_2;

/* TRABALHANDO COM VIEWS*/
SELECT CATEGORIA.ID,VW_CURSOS_POR_CATEGORIA.* FROM VW_CURSOS_POR_CATEGORIA
			JOIN CATEGORIA ON CATEGORIA.NOME = VW_CURSOS_POR_CATEGORIA.CATEGORIA;
			
SELECT CURSO.ID, VW_CURSOS_PROGRAMAÇÃO_1.* FROM VW_CURSOS_PROGRAMAÇÃO_1
			JOIN CURSO ON CURSO.NOME = VW_CURSOS_PROGRAMAÇÃO_1.NOME;

